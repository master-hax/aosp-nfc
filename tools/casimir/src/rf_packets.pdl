little_endian_packets

/// Technology used for this message.
enum Technology : 8 {
    NFC_A = 1,
    NFC_B = 2,
    NFC_F = 3,
    NFC_V = 4,
}

/// Protocol used for data exchange.
/// The following table presents the compatible protocols
/// for the technology and platform being used.
///
///    | Technology | Platform | Protocol |
///    ------------------------------------
///    | NFC-A      | T2T      | T2T      |
///    |            | T4AT     | ISO-DEP  |
///    |            | -        | NFC-DEP  |
///    | NFC-B      | T4BT     | ISO-DEP  |
///    | NFC-F      | T3T      | T3T      |
///    | NFC-V      | T5T      | T5T      |
enum Protocol : 8 {
    UNDETERMINED = 0,
    T1T = 1,
    T2T = 2,
    T3T = 3,
    ISO_DEP = 4,
    NFC_DEP = 5,
    T5T = 6,
    NDEF = 7,
}

/// Type of packet being sent.
enum PacketType : 8 {
    DATA = 0,
    POLL_COMMAND = 1,
    POLL_RESPONSE = 2,
    SELECT_COMMAND = 3,
    SELECT_RESPONSE = 4,
    DESELECT_NOTIFICATION = 5,
}

/// Deselection reason.
enum DeselectReason : 8 {
    DH_REQUEST = 0,
    ENDPOINT_REQUEST = 1,
    RF_LINK_LOSS = 2,
    NFC_B_BAD_AFI = 3,
    DH_REQUEST_FAILED = 4,
}

packet RfPacket {
    sender: 16,
    receiver: 16,
    technology: Technology,
    protocol : Protocol,
    // General type of packet being sent.
    // The packet type is abstracted from the [DIGITAL] specification
    // as the Listen mode state machine can be simplified by removing
    // the collision detection, cascade levels ...
    type: PacketType,
    // The payload of the RF packet aims to be compatible with the format
    // expected of RF frames for the Frame RF Interface. It implies that,
    // following section 8.2 Frame RF Interface of the NCI specification,
    // parity bits and EoD bytes are NOT included in the payload.
    // Short frames when applicable are padded to the nearest byte boundary.
    _payload_,
}

/// Command to probe for Listeners:
///  • ALL_REQ Command or SENS_REQ Command for NFC-A
///  • ALLB_REQ Command or SENSB_REQ Command for NFC-B
///  • SENSF_REQ Command for NFC-F
///  • INVENTORY_REQ Command for NFC-V
///  • ATR_REQ Command for NFC-ACM
packet PollCommand : RfPacket (type = POLL_COMMAND) {
}

/// Command to select and activate a polled Listener.
/// The Listener is uniquely identified by the `sender` identifier
/// of the PollResponse packet.
/// The protocol field selects the activated protocol. Valid protocols are
/// determined by the technology and supported protocols of the Listener.
packet SelectCommand : RfPacket (type = SELECT_COMMAND) {
}

/// Notification sent when a Listener is deselected.
packet DeselectNotification : RfPacket (type = DESELECT_NOTIFICATION) {
    // Reason for the Listener being deselected:
    //  0x00 DH_Request
    //  0x01 Endpoint_Request
    reason : DeselectReason,
}

/// Poll response for an NFC-A Listener.
/// Combines information from the SENS_RES Response and the SEL_RES Response.
packet NfcAPollResponse : RfPacket (technology = NFC_A, type = POLL_RESPONSE) {
    // - **6.7.2.2** _The NFCID1 can be dynamically generated by the NFC Forum Device. If it is
    // dynamically generated by the NFC Forum Device, the length of the NFCID1
    // SHALL be limited to 4 bytes._
    //
    // - **6.7.2.3** _A dynamically generated NFCID1 SHALL be generated whenever the NFC
    // Forum Device enters the IDLE State of the Listen Mode state machine
    // (specified in [ACTIVITY]) from any of the following States:
    // NO_REMOTE_FIELD, ATR_READY_A, ATR_READY_F, TARGET_A, TARGET_F._
    //
    // - **6.7.2.4** _The nfcid1[0] for a single-size NFCID1 SHALL be coded as specified in Table 17._
    //
    // - **6.7.2.5** _The Listener SHALL set nfcid1[0] of a single-size NFCID1 and nfcid1[3] of a
    // double-size NFCID1 to a value not equal to 88h._
    _size_ (nfcid1) : 8,
    nfcid1 : 8[],
    // - `00b`: Configured for Type 2 Tag Platform
    // - `01b`: Configured for Type 4A Tag Platform
    // - `10b`: Configured for the NFC-DEP Protocol
    // - `11b`: Configured for the NFC-DEP Protocol and Type 4A Tag Platform
    int_protocol : 2,
    _reserved_ : 6,
}

/// Select command for an NFC-A Listener using ISO-DEP protocol (Type-4A Tag platform).
/// Contains information from the RATS Command.
packet T4ATSelectCommand : RfPacket (technology = NFC_A, protocol = ISO_DEP, type = SELECT_COMMAND) {
    param : 8,
}

/// Select response for an NFC-A Listener using ISO-DEP protocol (Type-4A Tag platform).
/// Contains information from the RATS Response.
packet T4ATSelectResponse : RfPacket (technology = NFC_A, protocol = ISO_DEP, type = SELECT_RESPONSE) {
    _size_(rats_response) : 8,
    rats_response : 8[],
}

/// Select command for an NFC-A Listener using NFC-DEP protocol.
/// Contains information from the PSL_REQ Command.
packet NfcDepSelectCommand : RfPacket (protocol = NFC_DEP, type = SELECT_COMMAND) {
    lr : 2,
    _reserved_ : 6,
}

/// Select response for an NFC-A Listener using NFC-DEP protocol.
/// Contains information from the ATR_RES Response and PSL_RES Response.
packet NfcDepSelectResponse : RfPacket (protocol = NFC_DEP, type = SELECT_RESPONSE) {
    _size_(atr_response) : 8,
    atr_response : 8[],
}

/// Transmit data packets of the selected protocol.
/// Valid protocols are determined by the technology and supported
/// protocols of the Listener.
packet Data : RfPacket (type = DATA) {
    _payload_,
}
