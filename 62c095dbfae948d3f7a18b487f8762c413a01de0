{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "570cc52d_01e63ccc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "Starting with api.rs",
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13cc19c4_3800e6b9",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "Look at the third comment below for closure vs function pointer",
      "range": {
        "startLine": 37,
        "startChar": 14,
        "endLine": 37,
        "endChar": 37
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b69bd766_214fa91b",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "nit: Can you move this above \"pub struct NciApi\"? That way both the NciApi struct and its impl block will be together which improves readability.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 16
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2bcc34e_121e5013",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "\"fn\" is a function pointer which might be fine for your use case.\n\nIt might be preferable to use closures (\"Fn\" trait) like:\n\nstruct NfcData\u003cR, H\u003e\nwhere\n    R: Fn(u8, u16, \u0026[u8]),\n    H: Fn(u8, u16, \u0026[u8]),\n{\n    init_response: Option\u003cInitResponsePacket\u003e,\n    rf_callback: Option\u003cR\u003e,\n    hci_callback: Option\u003cH\u003e,\n}\n\nClosures can capture their environment. So when you pass this callback you can potentially pass arguments from variables in the surrounding context.\n\nEven if you decide not to use closures you should at least define the function pointer as a type:\n\ntype RfCallback \u003d fn(u8, u16, \u0026[u8]);\ntype HciCallback \u003d fn(u8, u16, \u0026[u8]);",
      "range": {
        "startLine": 45,
        "startChar": 24,
        "endLine": 45,
        "endChar": 42
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b750e8cd_06312052",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "define a new type or use closures as mentioned earlier",
      "range": {
        "startLine": 76,
        "startChar": 49,
        "endLine": 76,
        "endChar": 63
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38f195b_e4d420f8",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "better name?",
      "range": {
        "startLine": 102,
        "startChar": 24,
        "endLine": 102,
        "endChar": 26
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a3d6d64_db437973",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "is the intent here to fill this in later?",
      "range": {
        "startLine": 109,
        "startChar": 16,
        "endLine": 109,
        "endChar": 27
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74cf2dc6_a66e17a0",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "shouldn\u0027t this be a constant with some docs explaining what exactly it means?",
      "range": {
        "startLine": 115,
        "startChar": 19,
        "endLine": 115,
        "endChar": 20
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d13f833_be744680",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "why not use a channel instead of a callback? If you use channels, you can enforce additional semantics such as how many callbacks could be pending by controlling the size of the channel. For instance, a oneshot channel will only allow a single callback. I feel like that is much more readable as it conveys the intent of the code clearly.",
      "range": {
        "startLine": 151,
        "startChar": 33,
        "endLine": 151,
        "endChar": 58
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b10ec40_b72b262e",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "define constant and use that here?",
      "range": {
        "startLine": 154,
        "startChar": 24,
        "endLine": 154,
        "endChar": 26
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0635077_a68992d0",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 291,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "let mut destparams \u003d vec![];",
      "range": {
        "startLine": 291,
        "startChar": 8,
        "endLine": 291,
        "endChar": 57
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce297adf_ac3a8ed5",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "better name? use underscores to separate words (snake case)",
      "range": {
        "startLine": 296,
        "startChar": 20,
        "endLine": 296,
        "endChar": 26
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "740e29b0_aa7df470",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "you can skip specifying the type since the compiler should infer the type based on valdsp usage",
      "range": {
        "startLine": 296,
        "startChar": 26,
        "endLine": 296,
        "endChar": 36
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16e578c9_a555343e",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "declare as constant and then use here?",
      "range": {
        "startLine": 320,
        "startChar": 56,
        "endLine": 320,
        "endChar": 57
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f46bac8e_30544ab6",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "try Ok(nci::Status::Failed.into())\n\nIf that works use it in other places too",
      "range": {
        "startLine": 333,
        "startChar": 38,
        "endLine": 333,
        "endChar": 44
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9144f10_32da7b53",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 395,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "define as constant",
      "range": {
        "startLine": 395,
        "startChar": 37,
        "endLine": 395,
        "endChar": 38
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c37b326_c4a61aa9",
        "filename": "src/rust/nci/api.rs",
        "patchSetId": 1
      },
      "lineNbr": 415,
      "author": {
        "id": 1106424
      },
      "writtenOn": "2022-04-29T00:20:59Z",
      "side": 1,
      "message": "define as constant",
      "range": {
        "startLine": 415,
        "startChar": 37,
        "endLine": 415,
        "endChar": 38
      },
      "revId": "62c095dbfae948d3f7a18b487f8762c413a01de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}